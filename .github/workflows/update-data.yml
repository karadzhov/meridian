name: Update Data

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC
  workflow_dispatch: # Allows manual triggers

jobs:
  update-vector-tiles:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget osmium-tool gcc g++ make libsqlite3-dev zlib1g-dev
          pip install geojson shapely
          wget -O tippecanoe-2.64.0.tar.gz https://github.com/felt/tippecanoe/archive/refs/tags/2.64.0.tar.gz
          tar -xzf tippecanoe-2.64.0.tar.gz
          cd tippecanoe-2.64.0
          sudo make -j
          sudo make install

      - name: Download Bulgarian OSM data
        run: |
          mkdir -p data
          wget -O data/bulgaria-latest.osm.pbf https://download.geofabrik.de/europe/bulgaria-latest.osm.pbf
      
      - name: Obtain municipality boundaries (admin_level=5)
        run: |
          osmium tags-filter data/bulgaria-latest.osm.pbf r/boundary=administrative r/admin_level=5 -o data/bulgaria-admin_level_5.osm.pbf

      - name: Convert municipality boundaries to GeoJSON
        run: |
          osmium export data/bulgaria-admin_level_5.osm.pbf -o data/bulgaria-admin_level_5.geojson

      - name: Convert GeoJSON to .poly files
        run: |
          # Python script to convert GeoJSON to .poly files
          echo "
          import os
          import geojson
          from shapely.geometry import shape

          def geojson_to_poly(geojson_file, output_dir):
              # Create the output directory if it doesn't exist
              if not os.path.exists(output_dir):
                  os.makedirs(output_dir)

              with open(geojson_file, 'r') as f:
                  data = geojson.load(f)

              for feature in data['features']:
                  print(f\"feature: {feature}\n\")
                  properties = feature.get('properties', {})
                  print(f\"properties: {properties}\n\")
                  # Use the 'name' property, or fallback to 'id' or 'unknown_region'
                  region_name = properties.get('name', properties.get('id', 'unknown_region')).replace(' ', '_')
                  print(f\"region_name: {region_name}\n\")

                  # Ensure the region_name is valid and not empty
                  if not region_name.strip():
                      region_name = 'unknown_region'

                  geometry = shape(feature['geometry'])

                  poly_file_path = os.path.join(output_dir, f\"{region_name}.poly\")
                  with open(poly_file_path, 'w') as poly_file:
                      poly_file.write(f\"{region_name}\n\")

                      if geometry.geom_type == 'Polygon':
                          write_polygon(poly_file, geometry)
                      elif geometry.geom_type == 'MultiPolygon':
                          for i, polygon in enumerate(geometry):
                              poly_file.write(f\"{i + 1}\n\")
                              write_polygon(poly_file, polygon)
                      poly_file.write(\"END\n\")

          def write_polygon(file, polygon):
              for coord in polygon.exterior.coords:
                  file.write(f\"    {coord[0]}    {coord[1]}\n\")
              file.write(\"END\n\")
          
          geojson_to_poly('data/bulgaria-admin_level_5.geojson', 'data/poly')
          " > convert_to_poly.py
          python3 convert_to_poly.py

      - name: Split OSM file by .poly files
        run: |
          mkdir -p regions
          for poly_file in data/poly/*.poly; do
              region_name=$(basename "$poly_file" .poly)
              osmium extract --polygon="$poly_file" data/bulgaria-latest.osm.pbf -o "data/regions/$region_name.osm.pbf"
          done

      - name: Convert OSM files to GeoJSON files
        run: |
          for region_file in data/regions/*.osm.pbf; do
              region_name=$(basename "$region_file" .osm.pbf)
              osmium export "$region_file" -o "data/$region_name.geojson"
          done

      # - name: Convert GeoJSON to PMTiles
      #   run: |
      #     tippecanoe -zg -o data/bulgaria-latest.pmtiles --drop-densest-as-needed data/bulgaria-latest.geojson

      # - name: Move PMTiles to static folder
      #   run: |
      #     mkdir -p static/tiles
      #     mv data/bulgaria-latest.pmtiles static/tiles/

      - name: Check if data has changed
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data
          git add static/tiles
          if git diff --cached --quiet; then
            echo "No changes detected. Skipping commit."
            exit 0
          else
            echo "Changes detected. Committing."
          fi
  
      - name: Commit and push if changes exist
        if: success()
        run: |
          git commit -m "Daily update: Add latest data"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
